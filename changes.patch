diff --git a/.gitignore b/.gitignore
index 9379568..107764e 100644
--- a/.gitignore
+++ b/.gitignore
@@ -8,3 +8,7 @@ venv
 __pycache__/
 *.py[cod]
 *$py.class
+
+*.db
+.DS_Store
+*.patch
diff --git a/my_agent/agent.py b/my_agent/agent.py
index 3770d91..cfa643c 100644
--- a/my_agent/agent.py
+++ b/my_agent/agent.py
@@ -22,7 +22,7 @@ from my_agent.utils.tools.reservation import (
 )
 from my_agent.utils.tools.rag import rag_assistant_tool_node
 from my_agent.utils.utils import parse_phone_number
-from langchain_core.messages import HumanMessage
+from langchain_core.messages import HumanMessage, AIMessage
 
 
 # Define the config
@@ -71,27 +71,37 @@ def buildGraph():
     return graph
 
 
-import uuid
 from dotenv import load_dotenv
 from langchain_core.messages import ToolMessage
 from my_agent.utils.utils import _print_event
 import streamlit as st
+from my_agent.utils.db import init_db, update_phone_number
+from my_agent.utils.chat import init_session_state, save_message
+from my_agent.utils.ui import sidebar_ui, get_selected_session, set_selected_session, display_messages
 
 
 def set_user_input(user_input):
     st.session_state.user_input = user_input
 
-
 if __name__ == "__main__":
     load_dotenv()
+    init_db()
+    init_session_state()
 
     if "graph" not in st.session_state:
         st.session_state.graph = buildGraph()
 
-    if "config" not in st.session_state:
-        thread_id = str(uuid.uuid4())
+    with st.sidebar:
+        selected_session_id = sidebar_ui()
+        # 세션 선택 변경 시 메시지 로드
+        if selected_session_id is not None and selected_session_id != get_selected_session():
+            set_selected_session(selected_session_id)
+
+    current_session_id = get_selected_session()
 
-        st.session_state.config = {"configurable": {"phone_number": "", "thread_id": thread_id}}
+    if current_session_id is None:
+        st.write("채팅방을 선택하거나 새로 만들어 주세요.")
+        st.stop()
 
     st.title("강아지 미용 예약 서비스 챗봇입니다!")
 
@@ -103,26 +113,29 @@ if __name__ == "__main__":
         "확인에 활용되며, 고객님과 반려동물을 위한 최적의 서비스를 준비하는 데 사용됩니다. 😊  \n"
         "ex)01012345678  \n"
     )
-    if "messages" not in st.session_state:
-        st.session_state.messages = [{"role": "assistant", "content": str}]
+    if len(st.session_state.messages) == 0:
+        st.session_state.messages.append(AIMessage(content=str))
+        save_message(current_session_id, "assistant", str)
 
-    # Display chat messages from history on app rerun
-    for message in st.session_state.messages:
-        with st.chat_message(message["role"]):
-            st.markdown(message["content"])
+    display_messages(st.session_state.messages)
 
     # React to user input
     if prompt := st.chat_input("What is up?"):
         st.chat_message("user").markdown(prompt)
-        st.session_state.messages.append({"role": "user", "content": prompt})
+        st.session_state.messages.append(HumanMessage(content=prompt))
+        save_message(current_session_id, "user", prompt)
         if st.session_state.config["configurable"]["phone_number"] == "":
             phone_number = parse_phone_number(prompt)
             if phone_number == []:
-                st.session_state.messages.append({"role": "assistant", "content": "전화번호가 잘못 입력되었습니다 다시 입력해주세요."})
+
+                st.session_state.messages.append(AIMessage(content="전화번호가 잘못 입력되었습니다 다시 입력해주세요."))
+                save_message(current_session_id, "assistant", "전화번호가 잘못 입력되었습니다 다시 입력해주세요.")
                 st.rerun()
             else: 
                 st.session_state.config["configurable"]["phone_number"] = phone_number[0]
-                st.session_state.messages.append({"role": "assistant", "content": "전화번호 입력이 완료되었습니다!"})
+                update_phone_number(current_session_id, phone_number[0])
+                st.session_state.messages.append(AIMessage(content="전화번호 입력이 완료되었습니다! 예약 상담을 도와드리겠습니다."))
+                save_message(current_session_id, "assistant", "전화번호 입력이 완료되었습니다! 예약 상담을 도와드리겠습니다.")
                 st.rerun()
         _printed = set()
 
@@ -142,7 +155,8 @@ if __name__ == "__main__":
             response = "죄송해요, 말씀하신 내용을 잘 이해하지 못했어요. 다시 시도하시거나, 구체적인 질문을 입력해 주세요. 예를 들어 '예약 변경' 또는 '가격 확인' 등을 말씀해주시면 더 잘 도와드릴 수 있어요!"
         with st.chat_message("assistant"):
             st.markdown(response)
-        st.session_state.messages.append({"role": "assistant", "content": response})
+        st.session_state.messages.append(AIMessage(content=response))
+        save_message(current_session_id, "assistant", response)
 
     if "user_input" not in st.session_state:
         st.session_state.user_input = None
